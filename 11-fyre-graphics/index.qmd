---
execute: 
  echo: false
format: 
  revealjs:
    navigation-mode: vertical
    logo: ../libs/unl/N.svg
    theme: ../libs/unl/inverse.scss
    includes:
      in_header: ../libs/unl/header.html
    lib_dir: libs
    embed-resources: true

lightbox: true
---

```{r setup, include = F}
library(ggplot2)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(stringr)
library(knitr)
```

## Outline

::::: columns
::: column
1.  Why do we make charts?

2.  What makes a chart effective?

3.  What chart works for my data?

4.  Which chart(s) should I use?
:::

::: column
![Flowchart showing different data types and corresponding graphics.](data-to-vis-flowchart.png)
:::
:::::

# Why?

Why do we make charts?

## Tables are Tedious {.scrollable .tiny}

```{r}
if (!file.exists("../06-REU-graphics/stars.csv")) download.file("https://raw.githubusercontent.com/astronexus/HYG-Database/main/hyg/v3/hyg_v38.csv", destfile = "../06-REU-graphics/stars.csv")
stars <- read_csv("../06-REU-graphics/stars.csv")

knitr::kable(stars[1:100,c(1, 3, 8, 9, 10, 13, 14, 15, 16)])
```

::: notes
The obvious reason is that they're prettier to look at than tables, and when you have a lot of data, they're also more concise - you trade accuracy of having every data point for the convenience of being able to actually "see" every data point across a couple of dimensions.
:::

## Charts are easier to read!

```{r HR-diagram}
#| fig-width: 8
#| fig-height: 5
#| out-width: "100%"
#| message: false
#| warning: false
#| echo: false
#| cache: true
#| fig-cap: "The Hertzsprung Russell diagram. Discovered independently by Ejnar Hertzsprung (1873–1967) and Henry Norris Russell (1877–1957). The diagram plots the color index of the star against the brightness (absolute magnitude) of the star. As a result, it is possible to discern that these two variables are related and change together over a star's life cycle: a hypothesis that only came to be because of this chart."
#| fig-alt: "A scatter plot showing the color index of a star on the x-axis and the absolute magnitude (brightness) of the star on the y-axis. Points are colored by spectral class, which varies from blue to white to yellow to red as the color index increases and the star's temperature decreases. Points are primarily located along a downward-sloping line from the top left to the bottom right, which is labeled the 'main sequence'. There is another set of points which diverges from the main sequence and extends out horizontally in the middle of the graph; these are labeled 'giants', and a few outliers that are above the giant cluster are labeled 'supergiants'. Below the main sequence stars, there are outliers which are labeled 'dwarfs'."
#| fig-dpi: 300
stars <- stars %>%
  mutate(Spectral.Class = str_extract(spect, "^.") %>%
           str_to_upper() %>%
           factor(levels = c("O", "B", "A", "F", "G", "K", "M"), ordered = T),
         EarlyLate = str_extract(spect, ".(\\d)") %>%
           str_replace_all("[^\\d]", "") %>% as.numeric(),
         Temp = 4600*(1/(.92*ci + 1.7) + 1/(.92*ci) + 0.62)) %>%
  filter(!is.na(Spectral.Class) & !is.na(EarlyLate) & !is.na(hip)) %>%
  arrange(Spectral.Class, EarlyLate) %>%
  mutate(SpectralClass2 = paste0(Spectral.Class, EarlyLate) %>% factor(., levels = unique(.)))

ggplot(data = filter(stars, dist < 500)) + 
  # annotate(x = -.25, xend = .75, y = -2, yend = -6.5, arrow = arrow(ends = "both", length = unit(.1, "cm")), geom = "segment", color = "grey") + 
  annotate(x = 0.125, xend = 2, y = 4.25, yend = 4.25, arrow = arrow(ends = "both", length = unit(.1, "cm")), geom = "segment", color = "grey") + 
  geom_point(aes(x = ci, y = -absmag, color = Spectral.Class), alpha = .3) + 
  scale_x_continuous("B-V Color Index", breaks = c(0, .5, 1, 1.5, 2), labels = c("Hot  0.0       ", "0.5", "1.0", "1.5", "           2.0  Cool")) + 
  scale_y_continuous("Absolute Magnitude (Brightness)", breaks = c(-8, -4, 0, 4), labels = c(8, 4, 0, -4)) + 
  scale_color_manual("Spectral\nClass", values = c("#2E478C", "#426DB9", "#B5D7E3", "white", "#FAF685", "#E79027", "#DA281F")) + 
  annotate(x = .25, y = -5.5, label = "Dwarfs", geom = "text", angle = -25, color = "white") + 
  annotate(x = .5, y = -3.75, label = "Main Sequence", geom = "text", angle = -28) + 
  annotate(x = 1.125, y = 0, label = "Giants", geom = "text") + 
  annotate(x = 1, y = 4.5, label = "Supergiants", geom = "text", color = "white") +
  theme(panel.background = element_rect(fill = "#000000"),
        legend.key = element_blank(), 
        panel.grid = element_line(colour = "grey40"),
        axis.text = element_text(color = "white"),
        text = element_text(size = 18, color = "white"), 
        legend.background = element_rect(fill = "#000000"),
        plot.background = element_rect(fill = "#000000")) + 
  ggtitle("Hertzsprung-Russell Diagram") + 
  coord_cartesian(xlim = c(-.25, 2.25), ylim = c(-12, 7)) + 
  guides(color = guide_legend(override.aes = list(alpha = 1)))
```

## Why Charts? {.large}

Graphics are a form of [**external cognition**]{.cerulean .emph} that allow us to think about the [**data**]{.purple .emph} rather than the [**chart**]{.green .emph}.

## Why Charts?

Good graphics take advantage of how the brain works:

-   preattentive processing

-   perceptual grouping

-   visual limitations

[Let's demonstrate ...]{.large .cerulean .emph .fragment}


## Preattentive Perception {.r-fit-text}

-   Combinations of preattentive features require attention

    -   Double-encoding (using multiple features for the same variable) is ok

```{r preattentive1}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| label: fig-preattentive1
#| fig-cap: "Two scatterplots with one point that is different. Can you easily spot the different point?"
#| fig-subcap: 
#|   - "Shape"
#|   - "Color"
#| layout-ncol: 2

set.seed(153253)
data <- data.frame(expand.grid(x=1:6, y=1:6), color=sample(c(1,2), 36, replace=TRUE))
data$x <- data$x+rnorm(36, 0, .25)
data$y <- data$y+rnorm(36, 0, .25)
suppressWarnings(library(ggplot2))
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
# new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
# new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit")

data$shape <- c(rep(2, 15), 1, rep(2,20))
library(scales)
ggplot(data=data, aes(x=x, y=y, color=factor(1, levels=c(1,2)), shape=factor(shape), size=I(5))) + 
  geom_point() +
  scale_shape_manual(guide="none", values=c(19, 15)) + 
  scale_color_discrete(guide="none") + 
  new_theme_empty

data$shape <- c(rep(2, 25), 1, rep(2,10))
ggplot(data=data, aes(x=x, y=y, color=factor(shape), shape=I(19), size=I(5)))+
  geom_point() +  
  scale_color_discrete(guide="none") + 
  new_theme_empty
```

## Preattentive Perception {.r-fit-text}

-   Combinations of preattentive features require attention

    -   Double-encoding (using multiple features for the same variable) is ok

```{r preattentive2}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| label: fig-preattentive2
#| fig-cap: "Two scatterplots. Can you easily spot the different point(s)?"
#| fig-subcap: 
#|   - "Shape and Color (dual encoded)"
#|   - "Shape and Color (different variables)"
#| layout-ncol: 2
set.seed(1532534)
data <- data.frame(expand.grid(x=1:6, y=1:6), color=sample(c(1,2), 36, replace=TRUE))
data$x <- data$x+rnorm(36, 0, .25)
data$y <- data$y+rnorm(36, 0, .25)
suppressWarnings(library(ggplot2))
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
# new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
# new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit")

data$shape <- data$color
ggplot(data=data, aes(x=x, y=y, 
                      color=factor(color), 
                      shape=factor(shape))) + 
  geom_point(size = 5) +
  scale_shape_manual(guide="none", values=c(19, 15)) +
  scale_color_discrete(guide="none") + 
  new_theme_empty

data <- data %>%
  mutate(sample = row_number() %in% sample(1:n(), 4)) %>%
  mutate(shape = if_else(sample, if_else(shape == 1, 2, 1), shape))

ggplot(data=data, aes(x=x, y=y, 
                      color=factor(color), 
                      shape=factor(shape))) + 
  geom_point(size = 5) +
  scale_shape_manual(guide="none", values=c(19, 15)) +
  scale_color_discrete(guide="none") + 
  new_theme_empty
# qplot(data=data, x=x, y=y, color=factor(color), shape=factor(shape), size=I(5))+scale_shape_manual(guide="none", values=c(19, 15)) + scale_color_discrete(guide="none") + new_theme_empty
```

## Perceptual Grouping {.r-fit-text}

::: {layout="[[55,-10,35]]"}
![Is this a rabbit or a duck?](../06-REU-graphics/rabbitduck.png){#fig-rabbitduck fig-alt="A picture laid out on an x-y coordinate axis. The y-axis is labeled 'Rabbit' and the x-axis is labeled 'Duck'. When viewed with the rabbit axis at the bottom, the image looks like a rabbit with tall ears; when viewed with the duck axis at the bottom, the image looks like a duck, where the ears become the bill."}

![What do you see in this image?](../06-REU-graphics/IllusoryContour.png){#fig-illusory fig-alt="A complex figure that appears to be made up of a black outline of a triangle, three circles laid out to form the points of an inverted triangle, and a white triangle overlaid on top of the three dots. In practice, what actually exists is a set of three angles at 0, 120, and 240 degrees, and a set of three pac-man shapes (circles with a pie slice taken out) at 60, 180, and 300 degrees."}
:::

## Perceptual Grouping {.r-fit-text}

![](../06-REU-graphics/gestalt.jpg){fig-alt="An image reading 'GESTALT', where each letter demonstrates a principle of gestalt grouping. G has a white stripe over it, demonstrating closure - the stripe and the G are perceived as separate objects. E is shown as a grid of black squares, with grey squares making up the background; this demonstrates proximity - small objects close together are perceived as being part of the same whole. A bar is woven through the S shape, showing good continuation - the S is perceived as a continuous object that is behind the bar in the middle portion. The two Ts are striped and indicate similarity - they are similarly shaped and patterned and can be perceived as a group. The AL are connected, and the inside of the A seems to have a white tree in the middle, demonstrating figure/ground. The final T is part of the similarity group."}

## Grouping in Charts

```{r chart-emphasis-r}
#| label: chart-emphasis-r
#| fig-width: 6
#| fig-height: 4
#| fig-subcap: 
#|   - "Bar chart, showing 5 states"
#|   - "Line chart, with one state per line"
#|   - "Box plot by year, all 50 states"
#| layout-nrow: 1
#| layout-ncol: 3

library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(geomtextpath)
library(stringr)
theme_set(theme_bw())
counties <- read_csv("https://raw.githubusercontent.com/evangambit/JsonOfCounties/master/counties.csv")

popsubset <- counties |> select(name, fips, state, starts_with("population")) |>
  pivot_longer(starts_with("population"), names_to = "year", values_to = "population") |>
  mutate(year = parse_number(year))

state_pop <- popsubset |> group_by(state, year) |>
  summarize(population = sum(population))

pal <- viridis::viridis(10)
state_pop %>%
  filter(state %in% c("NE", "IA", "CO", "MO", "KS")) %>%
  ggplot(aes(x = state, y = population, fill = factor(year))) +
  geom_col(position = "dodge", color = "black") +
  scale_fill_manual("Year", values = pal) +
  scale_x_discrete("State") + 
  ylab("State Population, 2010-2019") + 
  theme(legend.position = c(1, 1), legend.justification = c(.95,.95))

state_pop |>
  filter(state %in% c("NE", "IA", "CO", "MO", "KS")) |>
  mutate(label = str_replace_all(state, c("NE" = "Nebraska", "IA" = "Iowa", "CO" = "Colorado", "MO" = "Missouri", "KS" = "Kansas"))) |>
  ggplot(aes(x = year, y = population, color = state)) +
  geom_textpath(aes(label = label), text_only = F) + 
  scale_x_continuous("Year", breaks = (1005:1010)*2) + 
  guides(color ="none") + 
  ylab("Population")

state_pop %>%
  ggplot(aes(x = factor(year), y = population)) +
  geom_boxplot() +
  xlab("Year") + 
  ylab("Population")
```

## Color {.r-fit-text}

-   10% of XY and 0.2% of XX have color deficiency

-   Avoid rainbow color schemes

    -   unequal perception of different colors =\> misleading idea of distance

    -   avoid "stoplight" color schemes

::: {#fig-ishihara layout-ncol="6"}
![](Ishihara_01.jpg)

![](Ishihara_02.jpg)

![](Ishihara_03.jpg)

![](Ishihara_04.jpg)

![](Ishihara_07.jpg)

![](Ishihara_10.jpg)

Plates from the Ishihara colorblindness test
:::

## Color {.r-fit-text}

-   Strategies
    -   double encoding (color + shape or linetype)
    -   make it work with a black and white printer
    -   use monochromatic (single color) gradients where possible ![](monochrome-gradient.png){.vcenter}
    -   bidirectional scales: go through a neutral color ![](bidirectional-gradient.png){.vcenter}

## Color {.r-fit-text}

-   Use implicit associations (reduce cognitive load)

|         |                                           |              |
|--------:|:-----------------------------------------:|:-------------|
|    cold |  ![](bidirectional-gradient-redblue.png)  | hot          |
| neutral | ![](monochrome-gradient-yellowgreen.png)  | eco-friendly |
|   flood | ![](bidirectional-gradient-brownblue.png) | drought      |

-   These associations may depend on culture
-   Avoid pink = female, blue = male

## Categorical Scales

-   **Working memory** is limited to $7 \pm 2$ items

  -   Avoid legends that have more than 7 categories

-   Colorblind friendlier color schemes vary both hue (color) and lightness: ![](paired-cat-color.png){.vcenter}

## Accessibility {.r-fit-text}

-   [Provide useful alt-text for your charts](https://www.boia.org/blog/5-steps-for-writing-alt-text-for-accessibility)

::: small
  - Why is the image there? 
  - Overall meaning?
  - What type of plot?
  - Important Details? 
  - Data Source (with link!)
:::

-   Use [larger text]{.green .large} to make it easy for people with vis deficiencies to read

-   [Some fonts are easier for people with dyslexia to read]{.purple .read}    
[If you're working with someone with dyslexia, ask them what font they prefer.]{.small}

# So now what?

## Find the right chart for the data

::: columns

::: {.column width="70%"}
-   [from Data to Viz](https://www.data-to-viz.com/):     
[https://www.data-to-viz.com/](https://www.data-to-viz.com/)

    -   R, Python, D3.js, React code examples for each chart
:::

::: {.column width="30%"}
![](data-to-vis-numeric)
:::
:::


## How-To Guides & Sample code

|   | Program | Resources/Strategy |
|:--------:|----------|----------------------------------------------------|
| {{< iconify devicon:r >}} | R | <https://r-graph-gallery.com> |
| {{< iconify devicon:python >}} | Python | <https://python-graph-gallery.com> |
| {{< iconify devicon:spss >}} | SPSS | Chart Builder, [Documentation](https://www.ibm.com/docs/en/spss-statistics/30.0.0?topic=features-legacy-dialog-charts) |
| {{< iconify devicon:matlab >}} | Matlab | <https://www.mathworks.com/products/matlab/plot-gallery.html> |
| {{< iconify file-icons:sas >}} | SAS | Export data, import into R/Python |
| {{< iconify vscode-icons:file-type-excel >}} | Excel | Export data, import into R/Python |

: {tbl-colwidths="\[5,10,85\]"}


## How-To Guides & Sample code

[[https://srvanderplas.github.io/stat-computing-r-python/](https://srvanderplas.github.io/stat-computing-r-python/)]{.cerulean}

::: columns
::: column

![](book-screenshot.png)
:::

::: column

- R and Python examples
- [Data Input](https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/01-data-input.html)
- [Data Exploration](https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/02a-eda.html)
- [Data Visualization](https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/02b-graphics.html)
- [Good Charts](https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/02c-good-graphics.html)

- ... and more - data wrangling, cleaning, ...
:::
:::

# Example - Penguins

## Data {.r-fit-text}

::::::: columns
:::: column
Categorical Variables:

::: small
-   Island
-   Species
-   Gender
-   year (2007, 2008, 2009)
:::

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png){width="75%"}
::::

:::: column
![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png){width="75%"}

Numeric variables:

::: small
-   bill length (mm)
-   bill depth (mm)
-   flipper length (mm)
-   flipper depth (mm)
-   body mass (g)
:::
::::
:::::::


## Data {.r-fit-text}

::::::: columns
:::: column
Categorical Variables:

::: small
-   Island
-   [Species]{.emph .cerulean}
-   [Gender]{.emph .cerulean}
-   year (2007, 2008, 2009)
:::

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png){width="75%"}
::::

:::: column
![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png){width="75%"}

Numeric variables:

::: small
-   [bill length (mm)]{.emph .cerulean}
-   [bill depth (mm)]{.emph .cerulean}
-   flipper length (mm)
-   flipper depth (mm)
-   body mass (g)
:::
::::
:::::::


```{r}
#| echo: false
#| include: false
library(palmerpenguins)
data(penguins)
library(ggplot2)
theme_set(theme_bw())
```

## First Steps - Explore!
```{r}
#| fig-width: 4
#| fig-height: 4
#| fig-dpi: 300
#| layout-ncol: 2
ggplot(data = penguins, aes(x = bill_length_mm)) + geom_histogram()

ggplot(data = penguins, aes(x = bill_depth_mm)) + geom_histogram()
```

## First Steps - Explore!
```{r}
#| fig-width: 4
#| fig-height: 4
#| fig-dpi: 300
#| layout-ncol: 2
ggplot(data = penguins, aes(x = species, y = bill_length_mm)) + geom_boxplot()

ggplot(data = penguins, aes(x = species, y = bill_depth_mm)) + geom_boxplot()
```

## First Steps - Explore!

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
library(palmerpenguins)
data(penguins)
library(ggplot2)
theme_set(theme_bw())
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point()
```

## First Steps - Explore! {auto-animate="true"}

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) + geom_point() + 
theme(
  legend.background = element_rect(fill = "transparent"),
  legend.position = "inside",
  legend.location = "panel",
  legend.position.inside=c(1, 0),
  legend.justification = c(1.05, -0.05))
```

## First Steps - Explore! {auto-animate="true"}

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = sex, shape = sex))  +  geom_point(size = 5) + 
  scale_shape_manual(values = c("female" = "♀", male = "♂"), na.value = "?") +
theme(
  legend.background = element_rect(fill = "transparent"),
  legend.position = "inside",
  legend.location = "panel",
  legend.position.inside=c(1, 0),
  legend.justification = c(1.05, -0.05))
```

## First Steps - Explore! {auto-animate="true"}

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) + geom_point()+ 
theme(
  legend.background = element_rect(fill = "transparent"),
  legend.position = "inside",
  legend.location = "panel",
  legend.position.inside=c(1, 0),
  legend.justification = c(1.05, -0.05))
```

## First Steps - Explore! {auto-animate="true"}

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = sex)) + 
  geom_point(size = 5) + 
  scale_shape_manual(values = c("female" = "♀", male = "♂"), na.value = "?") + 
theme(
  legend.background = element_rect(fill = "transparent"),
  legend.position = "inside",
  legend.location = "panel",
  legend.position.inside=c(1, 0),
  legend.justification = c(1.05, -0.05))
```

## Important Characteristics

What is important to show about the relationship between sex, species, and bill dimensions?

## Facets - Subsets of data

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) + geom_point()+ 
  facet_grid(~sex)
```

- Sometimes, it's helpful to remove missing data (but you should say so!)

## Emphasize Groups

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = species, fill = species, shape = sex)) + 
  geom_point(size = 5) + 
  scale_shape_manual(values = c("female" = "F", male = "M"), na.value = "?") + 
  stat_ellipse(aes(group = interaction(sex, species)), geom="polygon", alpha = .1, linetype = 2) 
```

## Emphasize Trends

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = species, fill = species)) + 
  geom_point() + 
  geom_smooth(method = "lm") 
```

## Emphasize Moderating Variables

```{r}
#| fig-width: 7
#| fig-height: 4
#| fig-dpi: 300
ggplot(data = na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = species, fill = species, linetype = sex)) + 
  geom_point() + 
  geom_smooth(method = "lm", aes(group = interaction(sex, species)))
```


# Questions?